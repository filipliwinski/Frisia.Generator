using Frisia.Solver;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using NLog;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace Frisia.Generator.Demo
{
    class Program
    {
        private static readonly ILogger logger = LogManager.GetLogger("Default");
        private static readonly Version version = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;
        private static readonly string appName = string.Format("Frisia.Generator.Demo (v.{0}.{1}.{2})", version.Major, version.Minor, version.Build);

#if DEBUG
        private static readonly bool debug = true;
#else
        private static readonly bool debug = false;
#endif

        static void Main(string[] args)
        {
            try
            {
                logger.Info(appName);

                // Setup configuration source
                var appSettings = "appsettings.json";
                string projectPath = AppDomain.CurrentDomain.BaseDirectory;

                var configuration = new ConfigurationBuilder()
                       .SetBasePath(projectPath)
                       .AddJsonFile(appSettings)
                       .Build();

                var rewriterSection = configuration.GetSection("Rewriter");
                var loopIterations = Convert.ToUInt32(rewriterSection.GetSection("LoopIterations").Value);
                var visitUnsatisfiablePaths = Convert.ToBoolean(rewriterSection.GetSection("VisitUnsatisfiablePaths").Value);
                var visitTimeoutPaths = Convert.ToBoolean(rewriterSection.GetSection("VisitTimeoutPaths").Value);
                var logFoundBranches = Convert.ToBoolean(rewriterSection.GetSection("LogFoundBranches").Value);
                var writeRewrittenCodeToFile = Convert.ToBoolean(rewriterSection.GetSection("WriteRewrittenCodeToFile").Value);
                var timeout = Convert.ToByte(rewriterSection.GetSection("TimeoutInSeconds").Value);

                var solver = new Z3Solver();
                var generator = new ParamsGenerator(logger, solver, loopIterations, visitUnsatisfiablePaths, visitTimeoutPaths, logFoundBranches, timeout);

                StartAsync(logger, solver, generator, args, writeRewrittenCodeToFile, loopIterations).Wait();
            }
            catch (Exception ex)
            {
                if (debug)
                {
                    logger.Error(ex);
                }
                else
	            {
                    logger.Fatal(ex);
                }
            }

            LogManager.Flush();

            Console.WriteLine("\n\nPress any key to close...");
            Console.ReadKey();
        }

        private static async Task StartAsync(
            ILogger logger, 
            ISolver solver, 
            IParamsGenerator generator, 
            string[] args, 
            bool writeRewrittenCodeToFile,
            uint loopIterations)
        {
            // Get files
            IList<string> paths = null;
            var totalTimer = Stopwatch.StartNew();

            if (args.Length != 0)
            {
                paths = new List<string>();

                for (int i = 0; i < args.Length; i++)
                {
                    if (!args[i].EndsWith(".cs"))
                    {
                        throw new ArgumentException($"Invalid file name: {args[i]}");
                    }
                    var filePath = Directory.GetCurrentDirectory() + "\\" + args[i];
                    if (!File.Exists(filePath))
                    {
                        throw new FileNotFoundException($"File does not exist: {filePath}");
                    }
                    paths.Add(filePath);
                }
            }
            else
            {
                paths = new List<string>(Directory.EnumerateFiles(Directory.GetCurrentDirectory()).Where(x => !x.EndsWith("_rewritten.cs") && x.EndsWith(".cs")));
            }

            if (paths == null || paths.Count == 0)
            {
                logger.Warn("No files found.");
            }

            foreach (var path in paths)
            {
                logger.Warn("SOURCE: " + path.Split('\\').Last());

                var cSharpCode = File.ReadAllText(path);
                var (sets, rewrittenNode, elapsed) = await generator.ProvideParametersAsync(cSharpCode);

                if (writeRewrittenCodeToFile && rewrittenNode != null)
                {
                    var rewrittenNodeText = $"// This code was generated by {appName}.{Environment.NewLine}// Loop iterations: {loopIterations}{Environment.NewLine}// Date: {DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss")}{Environment.NewLine}// Time: {elapsed}{Environment.NewLine}{Environment.NewLine}{rewrittenNode.SyntaxTree}";
                    File.WriteAllText(path + "_rewritten.cs", rewrittenNodeText);
                }

                var serializerSettings = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore
                };

                var json = JsonConvert.SerializeObject(sets, serializerSettings);
                File.WriteAllText(path + ".json", json);
            }

            logger.Info("_______________________________");
            logger.Info($"TOTAL TIME: {totalTimer.Elapsed}");
        }
    }
}
